{
  "title": "WebhookLib Documentation",
  "description": "Production-Quality Discord Webhook Library for Roblox Server Environments",
  "version": "1.0.0",
  "sections": [
    {
      "id": "introduction",
      "title": "Introduction",
      "content": "WebhookLib is a production-quality Discord webhook library specifically designed for Roblox Server environments. It provides a complete suite of features for sending Discord webhook messages including plain text and rich embed messages with automatic sanitization, player join/leave notifications with Roblox avatar thumbnails, optional automatic rate limiting and request queueing with exponential backoff, DataStore-backed join count tracking with in-memory caching, robust error handling with configurable retry logic, optional profanity filtering with custom word lists, comprehensive debugging and logging capabilities, and thread-safe operations that won't block the main game thread.",
      "subsections": [
        {
          "title": "Key Features",
          "content": "- **Production Ready**: Built for high-traffic games with robust error handling\n- **Rate Limiting**: Optional automatic rate limiting with request queueing\n- **Player Tracking**: Automatic join/leave notifications with avatar thumbnails\n- **Rich Embeds**: Send beautiful Discord embeds with automatic sanitization\n- **Thread Safe**: Non-blocking operations that won't freeze your game\n- **DataStore Integration**: Persistent join count tracking\n- **Profanity Filtering**: Optional content filtering with custom word lists\n- **Comprehensive Logging**: Debug mode for troubleshooting"
        },
        {
          "title": "Requirements",
          "content": "**Required Roblox Game Settings:**\n\n1. Go to Game Settings > Security tab\n2. Enable \"Allow HTTP Requests\" - This is REQUIRED for webhook functionality\n3. Ensure DataStore API access is enabled (usually enabled by default)\n4. For production games, consider enabling Studio API access for testing"
        }
      ]
    },
    {
      "id": "getting-started",
      "title": "Getting Started",
      "content": "This guide will help you set up WebhookLib in your Roblox game quickly and efficiently.",
      "subsections": [
        {
          "title": "Installation",
          "content": "1. Download the WebhookLib ModuleScript\n2. Place it in ReplicatedStorage and name it \"WebhookLib\"\n3. In a ServerScript, require the module:\n\n```lua\nlocal WebhookLib = require(game.ReplicatedStorage.WebhookLib)\n```"
        },
        {
          "title": "Discord Webhook Setup",
          "content": "**How to Obtain a Discord Webhook URL (Using the Proxy):**\n\n1. In your Discord server, go to Server Settings > Integrations > Webhooks\n2. Click New Webhook or Create Webhook\n3. Set the webhook name, avatar, and target channel\n4. Copy the webhook URL (format: https://discord.com/api/webhooks/ID/TOKEN)\n5. Open https://webhook.lewisakura.moe/\n6. Paste your normal Discord webhook URL and convert it\n7. You will get a new URL in the format: https://webhook.lewisakura.moe/api/webhooks/ID/TOKEN\n8. Use this new URL in your Roblox script instead of the normal Discord link\n9. **Keep this URL secure** – anyone with access can send messages to your Discord"
        },
        {
          "title": "Minimal Setup",
          "content": "Here's the absolute minimum code needed to get started:\n\n```lua\nlocal WebhookLib = require(game.ReplicatedStorage.WebhookLib)\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL_HERE\")\n\n-- Send a test message\nwebhook:SendMessage(\"Hello from Roblox!\")\n\n-- Optional: Connect player events\ngame.Players.PlayerAdded:Connect(function(player)\n    webhook:SendJoinMessage(player)\nend)\n\ngame.Players.PlayerRemoving:Connect(function(player)\n    webhook:SendLeaveMessage(player)\nend)\n```"
        },
        {
          "title": "Configuration Options",
          "content": "WebhookLib supports extensive configuration. All options are optional and have sensible defaults:\n\n```lua\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    username = \"My Game Bot\",\n    avatar_url = \"https://example.com/avatar.png\",\n    default_color = 0x0099ff,\n    queue_enabled = false, -- Only enable if needed\n    queue_rate_limit = nil, -- Set to enable rate limiting\n    filter_profanity = false,\n    debug = false,\n    max_retries = 3,\n    retry_backoff_base = 1,\n    cache_ttl_avatar = 300,\n    datastore_name = \"WebhookLib_JoinCounts\",\n    banned_words = {\"custom\", \"words\"}\n})\n```"
        }
      ]
    },
    {
      "id": "configuration",
      "title": "Configuration",
      "content": "WebhookLib offers extensive configuration options to suit different game requirements. All configuration is done during initialization.",
      "subsections": [
        {
          "title": "Basic Configuration",
          "content": "The most commonly used configuration options:\n\n```lua\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    username = \"My Game Bot\", -- Default webhook username\n    avatar_url = \"https://example.com/avatar.png\", -- Default avatar\n    default_color = 0x0099ff, -- Default embed color (hex)\n    debug = true -- Enable debug logging\n})\n```\n\n**Configuration Options:**\n- `username` (string): Default username for webhook messages\n- `avatar_url` (string): Default avatar URL for webhook messages\n- `default_color` (number): Default color for embeds (hex format)\n- `debug` (boolean): Enable detailed logging for troubleshooting"
        },
        {
          "title": "Queue and Rate Limiting",
          "content": "For high-traffic games, you can enable request queueing and rate limiting:\n\n```lua\n-- Enable queue without rate limiting\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    queue_enabled = true\n})\n\n-- Enable queue with rate limiting\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    queue_rate_limit = 2 -- 2 requests per second\n    -- queue_enabled is automatically set to true\n})\n```\n\n**Queue Options:**\n- `queue_enabled` (boolean): Enable request queueing (default: false)\n- `queue_rate_limit` (number): Requests per second limit (automatically enables queue)\n\n**When to Use Queueing:**\n- High-traffic games with many webhook calls\n- Games that send player notifications for large player counts\n- When you want to prevent Discord rate limiting\n\n**Note:** Only enable queueing if your game actually needs it. For most games, the default immediate sending is sufficient."
        },
        {
          "title": "Error Handling and Retries",
          "content": "Configure how WebhookLib handles failed requests:\n\n```lua\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    max_retries = 5, -- Retry failed requests up to 5 times\n    retry_backoff_base = 2 -- Base delay for exponential backoff\n})\n```\n\n**Retry Options:**\n- `max_retries` (number): Maximum number of retry attempts (default: 3)\n- `retry_backoff_base` (number): Base delay in seconds for exponential backoff (default: 1)\n\n**How Retries Work:**\n- Failed requests are automatically retried with exponential backoff\n- Delay increases: 1s, 2s, 4s, 8s, etc. (capped at 60 seconds)\n- Different handling for rate limits vs. server errors\n- Client errors (4xx) are not retried"
        },
        {
          "title": "Content Filtering",
          "content": "Enable profanity filtering and add custom banned words:\n\n```lua\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    filter_profanity = true,\n    banned_words = {\"spam\", \"advertisement\", \"custom\", \"words\"}\n})\n```\n\n**Filter Options:**\n- `filter_profanity` (boolean): Enable profanity filtering (default: false)\n- `banned_words` (array): Custom words to add to the default banned words list\n\n**Default Banned Words:**\n`\"noob\", \"trash\", \"garbage\", \"stupid\", \"idiot\", \"loser\", \"fail\"`\n\n**How Filtering Works:**\n- Banned words are replaced with asterisks (*)\n- Filtering applies to message content and embed fields\n- Case-insensitive matching\n- Punctuation is ignored during matching"
        },
        {
          "title": "Caching and DataStore",
          "content": "Configure avatar caching and DataStore settings:\n\n```lua\nlocal webhook = WebhookLib.new(\"YOUR_WEBHOOK_URL\", {\n    cache_ttl_avatar = 600, -- Cache avatars for 10 minutes\n    datastore_name = \"MyGame_WebhookData\" -- Custom DataStore name\n})\n```\n\n**Caching Options:**\n- `cache_ttl_avatar` (number): Avatar cache time-to-live in seconds (default: 300)\n- `datastore_name` (string): Custom DataStore name for join counts (default: \"WebhookLib_JoinCounts\")\n\n**Avatar Caching:**\n- Player avatars are cached to reduce API calls\n- Cache is automatically cleaned when TTL expires\n- Fallback to default avatar if fetch fails\n\n**DataStore Usage:**\n- Stores player join counts persistently\n- Automatic retry logic for DataStore operations\n- Graceful fallback if DataStore is unavailable"
        }
      ]
    },
    {
      "id": "api",
      "title": "API Reference",
      "content": "Complete reference for all WebhookLib methods and their parameters.",
      "subsections": [
        {
          "title": "Constructor",
          "content": "### WebhookLib.new(url, options)\n\nCreates a new WebhookLib instance.\n\n**Parameters:**\n- `url` (string, required): Discord webhook URL\n- `options` (table, optional): Configuration options\n\n**Returns:**\n- WebhookLib instance\n\n**Example:**\n```lua\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/...\", {\n    username = \"My Bot\",\n    debug = true\n})\n```\n\n**Throws:**\n- Error if URL is invalid or missing"
        },
        {
          "title": "Sending Messages",
          "content": "### SendMessage(content, overrides)\n\nSends a plain text message to Discord.\n\n**Parameters:**\n- `content` (string, required): Message content (max 2000 characters)\n- `overrides` (table, optional): Override default username/avatar for this message\n\n**Returns:**\n- `boolean`: true if queued successfully, false on error\n\n**Example:**\n```lua\n-- Basic message\nwebhook:SendMessage(\"Hello Discord!\")\n\n-- With overrides\nwebhook:SendMessage(\"Admin announcement!\", {\n    username = \"Admin Bot\",\n    avatar_url = \"https://example.com/admin-avatar.png\"\n})\n```\n\n**Notes:**\n- Content is automatically filtered if profanity filtering is enabled\n- Long messages are truncated to Discord's 2000 character limit\n- Returns immediately (message is queued or sent asynchronously)"
        },
        {
          "title": "Rich Embeds",
          "content": "### SendEmbed(embedTable)\n\nSends a rich embed message to Discord.\n\n**Parameters:**\n- `embedTable` (table, required): Discord embed structure\n\n**Returns:**\n- `boolean`: true if queued successfully, false on error\n\n**Example:**\n```lua\nwebhook:SendEmbed({\n    title = \"🏆 Game Statistics\",\n    description = \"Current server statistics\",\n    color = 0x0099ff,\n    fields = {\n        {name = \"Players Online\", value = \"15\", inline = true},\n        {name = \"Server Uptime\", value = \"2 hours\", inline = true}\n    },\n    thumbnail = {\n        url = \"https://example.com/thumbnail.png\"\n    },\n    footer = {\n        text = \"Automated Report\"\n    },\n    timestamp = os.date(\"!%Y-%m-%dT%H:%M:%SZ\")\n})\n```\n\n**Embed Structure:**\n- `title` (string): Embed title (max 256 characters)\n- `description` (string): Embed description (max 4096 characters)\n- `color` (number): Embed color in hex format\n- `fields` (array): Array of field objects\n- `thumbnail` (object): Thumbnail image\n- `footer` (object): Footer text and icon\n- `timestamp` (string): ISO 8601 timestamp\n\n**Automatic Sanitization:**\n- All text fields are filtered for profanity\n- Long text is automatically truncated\n- Invalid fields are removed"
        },
        {
          "title": "Multiple Embeds",
          "content": "### SendMultipleEmbeds(embeds)\n\nSends multiple embeds in a single message (up to 10 embeds).\n\n**Parameters:**\n- `embeds` (array, required): Array of embed tables\n\n**Returns:**\n- `boolean`: true if queued successfully, false on error\n\n**Example:**\n```lua\nlocal embeds = {\n    {\n        title = \"📈 Player Stats\",\n        color = 0x00ff00,\n        fields = {{name = \"Active Players\", value = \"15\", inline = true}}\n    },\n    {\n        title = \"⚠️ Server Health\",\n        color = 0xffaa00,\n        fields = {{name = \"Memory Usage\", value = \"85%\", inline = true}}\n    }\n}\n\nwebhook:SendMultipleEmbeds(embeds)\n```\n\n**Notes:**\n- Limited to 10 embeds per Discord message\n- Each embed is individually sanitized\n- Useful for dashboard-style reports"
        },
        {
          "title": "Player Notifications",
          "content": "### SendJoinMessage(player)\n\nSends an automatic join notification with player information.\n\n**Parameters:**\n- `player` (Player, required): Roblox Player instance\n\n**Returns:**\n- `boolean`: true if queued successfully, false on error\n\n**Example:**\n```lua\ngame.Players.PlayerAdded:Connect(function(player)\n    pcall(function() -- Always wrap in pcall for production\n        webhook:SendJoinMessage(player)\n    end)\nend)\n```\n\n### SendLeaveMessage(player)\n\nSends an automatic leave notification with player information.\n\n**Parameters:**\n- `player` (Player, required): Roblox Player instance\n\n**Returns:**\n- `boolean`: true if queued successfully, false on error\n\n**Example:**\n```lua\ngame.Players.PlayerRemoving:Connect(function(player)\n    pcall(function()\n        webhook:SendLeaveMessage(player)\n    end)\nend)\n```\n\n**Features of Player Notifications:**\n- Automatic player avatar fetching and caching\n- Join count tracking with DataStore persistence\n- Rich embed with player information:\n  - Username and Display Name\n  - User ID and Account Age\n  - Join count and current player count\n  - Player avatar thumbnail\n- Automatic error handling and retries"
        },
        {
          "title": "Custom Events",
          "content": "### SendCustomEvent(name, data)\n\nSends a custom event notification with structured data.\n\n**Parameters:**\n- `name` (string, required): Event name/title\n- `data` (table, optional): Key-value pairs of event data\n\n**Returns:**\n- `boolean`: true if queued successfully, false on error\n\n**Example:**\n```lua\nwebhook:SendCustomEvent(\"🎯 Player Achievement\", {\n    [\"Player\"] = \"john_doe\",\n    [\"Achievement\"] = \"First Victory!\",\n    [\"Score\"] = \"9,999\",\n    [\"Time\"] = os.date(\"%c\"),\n    [\"Difficulty\"] = \"Hard Mode\"\n})\n```\n\n**Features:**\n- Automatically creates embed with event data\n- Supports up to 25 fields per event\n- All data is converted to strings and sanitized\n- Timestamp is automatically added\n- Uses default embed color"
        },
        {
          "title": "Configuration Methods",
          "content": "### SetWebhookUrl(url)\n\nUpdates the webhook URL.\n\n**Parameters:**\n- `url` (string, required): New webhook URL\n\n**Returns:**\n- `boolean`: true if successful, false on error\n\n### SetDefaultUsername(username)\n\nUpdates the default username for webhook messages.\n\n**Parameters:**\n- `username` (string, required): New default username\n\n**Returns:**\n- `boolean`: true if successful, false on error\n\n### SetDefaultAvatarUrl(avatarUrl)\n\nUpdates the default avatar URL for webhook messages.\n\n**Parameters:**\n- `avatarUrl` (string, required): New default avatar URL\n\n**Returns:**\n- `boolean`: true if successful, false on error\n\n### SetDefaultColor(color)\n\nUpdates the default color for embeds.\n\n**Parameters:**\n- `color` (number, required): New default color in hex format (0x000000 to 0xFFFFFF)\n\n**Returns:**\n- `boolean`: true if successful, false on error\n\n**Example:**\n```lua\nwebhook:SetDefaultUsername(\"🤖 Game Bot v2.0\")\nwebhook:SetDefaultColor(0xff6600) -- Orange\nwebhook:SetDefaultAvatarUrl(\"https://example.com/new-avatar.png\")\n```"
        },
        {
          "title": "Queue Management",
          "content": "### EnableQueue(enabled, rateLimit)\n\nEnables or disables the request queue system at runtime.\n\n**Parameters:**\n- `enabled` (boolean, required): Enable or disable queue\n- `rateLimit` (number, optional): Requests per second limit\n\n**Returns:**\n- `boolean`: true if successful\n\n### GetQueueSize()\n\nGets the current number of pending requests in the queue.\n\n**Returns:**\n- `number`: Number of requests in queue\n\n### IsQueueEnabled()\n\nChecks if the queue system is currently enabled.\n\n**Returns:**\n- `boolean`: true if queue is enabled, false otherwise\n\n**Example:**\n```lua\n-- Enable queue with rate limiting\nwebhook:EnableQueue(true, 3) -- 3 requests per second\n\n-- Check queue status\nprint(\"Queue enabled:\", webhook:IsQueueEnabled())\nprint(\"Queue size:\", webhook:GetQueueSize())\n\n-- Disable queue\nwebhook:EnableQueue(false)\n```"
        },
        {
          "title": "Utility Methods",
          "content": "### EnableDebug(enabled)\n\nEnables or disables debug logging at runtime.\n\n**Parameters:**\n- `enabled` (boolean, required): Enable or disable debug logging\n\n**Returns:**\n- `boolean`: true if successful\n\n### GetConfiguration()\n\nReturns a copy of the current configuration.\n\n**Returns:**\n- `table`: Deep copy of current configuration\n\n### Shutdown()\n\nGracefully shuts down the webhook system, waiting for pending requests to complete.\n\n**Returns:**\n- `void`\n\n**Example:**\n```lua\n-- Enable debug logging\nwebhook:EnableDebug(true)\n\n-- Get current config\nlocal config = webhook:GetConfiguration()\nprint(\"Current username:\", config.username)\n\n-- Graceful shutdown (important for server closing)\ngame:BindToClose(function()\n    print(\"Shutting down webhook...\")\n    webhook:Shutdown()\n    wait(2) -- Give it time to complete\nend)\n```\n\n**Notes:**\n- `Shutdown()` waits up to 10 seconds for pending requests\n- Always call `Shutdown()` in `game:BindToClose()` for production games\n- Debug logging should be disabled in production for better performance"
        }
      ]
    },
    {
      "id": "examples",
      "title": "Usage Examples",
      "content": "Comprehensive examples showing different ways to use WebhookLib in real-world scenarios.",
      "subsections": [
        {
          "title": "Basic Setup Examples",
          "content": "### Minimal Setup (No Queue, No Rate Limiting)\n\n```lua\nlocal WebhookLib = require(game.ReplicatedStorage.WebhookLib)\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\")\n\n-- This sends messages immediately without queueing\nwebhook:SendMessage(\"🎮 Server started!\")\n```\n\n### With Queue Enabled (No Rate Limiting)\n\n```lua\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", {\n    username = \"My Game Bot\",\n    queue_enabled = true, -- Enables queueing but no rate limiting\n    debug = true\n})\n```\n\n### With Queue and Rate Limiting\n\n```lua\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", {\n    username = \"🎮 My Awesome Game\",\n    debug = true,\n    queue_rate_limit = 2, -- 2 requests per second (automatically enables queue)\n    filter_profanity = true,\n    default_color = 0x0099ff,\n    banned_words = {\"custom\", \"bad\", \"words\"} -- Adds to default list\n})\n```\n\n### Enable Queue at Runtime\n\n```lua\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\")\nwebhook:EnableQueue(true, 1) -- Enable queue with 1 request per second\n```"
        },
        {
          "title": "Advanced Configuration",
          "content": "### Production-Ready Setup\n\n```lua\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", {\n    username = \"🤖 Production Bot\",\n    avatar_url = \"https://example.com/bot-avatar.png\",\n    default_color = 0xff6600,\n    max_retries = 5,\n    retry_backoff_base = 2,\n    cache_ttl_avatar = 600, -- 10 minutes\n    datastore_name = \"MyGame_WebhookData\",\n    filter_profanity = true,\n    debug = false -- Production ready\n})\n```\n\n### High-Traffic Game Setup\n\n```lua\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", {\n    username = \"📊 Analytics Bot\",\n    queue_rate_limit = 5, -- 5 requests per second for high traffic\n    max_retries = 10,\n    cache_ttl_avatar = 1800, -- 30 minutes cache for performance\n    filter_profanity = true,\n    banned_words = {\"spam\", \"advertisement\", \"promotion\"}\n})\n```"
        },
        {
          "title": "Message Examples",
          "content": "### Simple Text Messages\n\n```lua\n-- Basic message\nwebhook:SendMessage(\"🎮 Server has started successfully!\")\n\n-- Message with custom override\nwebhook:SendMessage(\"📢 Special announcement from admin!\", {\n    username = \"📢 Admin Bot\",\n    avatar_url = \"https://cdn.discordapp.com/avatars/123/special-avatar.png\"\n})\n```\n\n### Rich Embed Examples\n\n```lua\n-- Game statistics embed\nwebhook:SendEmbed({\n    title = \"🏆 Game Statistics\",\n    description = \"Current server statistics and information\",\n    color = 0x0099ff,\n    fields = {\n        {name = \"👥 Players Online\", value = tostring(#game.Players:GetPlayers()), inline = true},\n        {name = \"⏰ Server Uptime\", value = \"2 hours 15 minutes\", inline = true},\n        {name = \"🌍 Region\", value = \"US-East\", inline = true},\n        {name = \"📊 Performance\", value = \"Excellent\", inline = false}\n    },\n    thumbnail = {\n        url = \"https://www.roblox.com/asset-thumbnail/image?assetId=123456789&width=420&height=420\"\n    },\n    footer = {\n        text = \"Automated Report\"\n    },\n    timestamp = os.date(\"!%Y-%m-%dT%H:%M:%SZ\")\n})\n```\n\n### Multiple Embeds in One Message\n\n```lua\nlocal embeds = {\n    {\n        title = \"📈 Player Stats\",\n        color = 0x00ff00,\n        fields = {{name = \"Active Players\", value = \"15\", inline = true}}\n    },\n    {\n        title = \"⚠️ Server Health\",\n        color = 0xffaa00,\n        fields = {{name = \"Memory Usage\", value = \"85%\", inline = true}}\n    },\n    {\n        title = \"💰 Economy Stats\",\n        color = 0xffd700,\n        fields = {{name = \"Total Currency\", value = \"1,000,000\", inline = true}}\n    }\n}\nwebhook:SendMultipleEmbeds(embeds)\n```"
        },
        {
          "title": "Player Event Tracking",
          "content": "### Automatic Player Join/Leave Notifications\n\n```lua\n-- Basic player events\ngame.Players.PlayerAdded:Connect(function(player)\n    pcall(function() -- Always wrap in pcall for production\n        webhook:SendJoinMessage(player)\n    end)\nend)\n\ngame.Players.PlayerRemoving:Connect(function(player)\n    pcall(function()\n        webhook:SendLeaveMessage(player)\n    end)\nend)\n```\n\n### Custom Player Events\n\n```lua\n-- Player achievement tracking\nlocal function onPlayerAchievement(player, achievementName, points)\n    webhook:SendCustomEvent(\"🎯 Player Achievement\", {\n        [\"Player\"] = player.DisplayName,\n        [\"Achievement\"] = achievementName,\n        [\"Points Earned\"] = tostring(points),\n        [\"Total Score\"] = tostring(leaderstats.Score.Value),\n        [\"Time\"] = os.date(\"%c\")\n    })\nend\n\n-- Player level up\nlocal function onPlayerLevelUp(player, newLevel, oldLevel)\n    webhook:SendEmbed({\n        title = \"📈 Level Up!\",\n        description = string.format(\"**%s** leveled up!\", player.DisplayName),\n        color = 0xffd700,\n        fields = {\n            {name = \"Previous Level\", value = tostring(oldLevel), inline = true},\n            {name = \"New Level\", value = tostring(newLevel), inline = true},\n            {name = \"Experience\", value = \"10,000 XP\", inline = true}\n        },\n        thumbnail = {\n            url = \"https://www.roblox.com/headshot-thumbnail/image?userId=\" .. player.UserId .. \"&width=420&height=420&format=png\"\n        }\n    })\nend\n```"
        },
        {
          "title": "Game Event Monitoring",
          "content": "### Server Health Monitoring\n\n```lua\n-- Memory usage alert\nlocal function checkServerHealth()\n    local memoryUsage = game:GetService(\"Stats\"):GetTotalMemoryUsageMb()\n    \n    if memoryUsage > 500 then -- Alert if memory usage is high\n        webhook:SendEmbed({\n            title = \"⚠️ High Memory Usage Alert\",\n            description = \"Server memory usage is critically high\",\n            color = 0xff4444,\n            fields = {\n                {name = \"Memory Usage\", value = string.format(\"%.1f MB\", memoryUsage), inline = true},\n                {name = \"Players Online\", value = tostring(#game.Players:GetPlayers()), inline = true},\n                {name = \"Uptime\", value = tostring(math.floor(workspace.DistributedGameTime / 60)) .. \" minutes\", inline = true}\n            },\n            timestamp = os.date(\"!%Y-%m-%dT%H:%M:%SZ\")\n        })\n    end\nend\n\n-- Check every 5 minutes\ngame:GetService(\"RunService\").Heartbeat:Connect(function()\n    if workspace.DistributedGameTime % 300 < 1 then -- Every 5 minutes\n        checkServerHealth()\n    end\nend)\n```\n\n### Game Round System\n\n```lua\n-- Round start notification\nlocal function onRoundStart(roundNumber, mapName)\n    webhook:SendEmbed({\n        title = \"🎮 Round Started\",\n        description = string.format(\"Round %d has begun!\", roundNumber),\n        color = 0x00ff00,\n        fields = {\n            {name = \"Round Number\", value = tostring(roundNumber), inline = true},\n            {name = \"Map\", value = mapName, inline = true},\n            {name = \"Players\", value = tostring(#game.Players:GetPlayers()), inline = true}\n        }\n    })\nend\n\n-- Round end with statistics\nlocal function onRoundEnd(winner, roundTime, stats)\n    webhook:SendEmbed({\n        title = \"🏆 Round Complete\",\n        description = string.format(\"**%s** won the round!\", winner),\n        color = 0xffd700,\n        fields = {\n            {name = \"Winner\", value = winner, inline = true},\n            {name = \"Round Time\", value = string.format(\"%d:%02d\", math.floor(roundTime/60), roundTime%60), inline = true},\n            {name = \"Players\", value = tostring(stats.totalPlayers), inline = true},\n            {name = \"Eliminations\", value = tostring(stats.eliminations), inline = true}\n        }\n    })\nend\n```"
        },
        {
          "title": "Error Handling and Production Practices",
          "content": "### Production-Ready Error Handling\n\n```lua\nlocal function setupWebhook()\n    local success, webhook = pcall(function()\n        return WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", {\n            username = \"🎮 Production Game\",\n            debug = false,\n            filter_profanity = true,\n            queue_rate_limit = 2, -- Prevent rate limiting\n            max_retries = 5\n        })\n    end)\n    \n    if success then\n        print(\"WebhookLib initialized successfully\")\n        return webhook\n    else\n        warn(\"Failed to initialize WebhookLib:\", webhook)\n        return nil\n    end\nend\n\nlocal webhook = setupWebhook()\nif webhook then\n    -- Safe message sending\n    pcall(function()\n        webhook:SendMessage(\"🚀 Production server started successfully!\")\n    end)\nend\n```\n\n### Graceful Shutdown\n\n```lua\n-- Graceful shutdown handling\ngame:BindToClose(function()\n    if webhook then\n        print(\"Shutting down webhook...\")\n        \n        -- Send final message\n        pcall(function()\n            webhook:SendMessage(\"🛑 Server shutting down...\")\n        end)\n        \n        -- Wait for pending requests\n        webhook:Shutdown()\n        wait(2) -- Give it time to complete\n        \n        print(\"Webhook shutdown complete\")\n    end\nend)\n```\n\n### Batch Operations for Performance\n\n```lua\n-- Instead of sending individual messages for each player\n-- Batch player information into a single embed\nlocal function sendPlayerSummary()\n    local players = game.Players:GetPlayers()\n    local fields = {}\n    \n    for i, player in ipairs(players) do\n        if i > 25 then break end -- Discord embed field limit\n        table.insert(fields, {\n            name = player.DisplayName,\n            value = string.format(\"ID: %d | Age: %dd\", player.UserId, player.AccountAge),\n            inline = true\n        })\n    end\n    \n    webhook:SendEmbed({\n        title = \"👥 Current Players\",\n        description = string.format(\"%d players currently online\", #players),\n        color = 0x0099ff,\n        fields = fields,\n        timestamp = os.date(\"!%Y-%m-%dT%H:%M:%SZ\")\n    })\nend\n```"
        },
        {
          "title": "Runtime Configuration Management",
          "content": "### Dynamic Configuration Changes\n\n```lua\n-- Create webhook with initial settings\nlocal webhook = WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", {\n    username = \"🤖 Game Bot\",\n    debug = true\n})\n\n-- Update settings at runtime\nwebhook:SetDefaultUsername(\"🤖 Game Bot v2.0\")\nwebhook:SetDefaultColor(0xff6600) -- Change to orange\nwebhook:EnableQueue(true, 3) -- Enable queue with 3 requests/second\nwebhook:EnableDebug(false) -- Disable debug for production\n\n-- Monitor queue status\nlocal function monitorQueue()\n    print(\"Queue enabled:\", webhook:IsQueueEnabled())\n    print(\"Queue size:\", webhook:GetQueueSize())\nend\n\n-- Check configuration\nlocal config = webhook:GetConfiguration()\nprint(\"Current username:\", config.username)\nprint(\"Rate limit:\", config.queue_rate_limit)\nprint(\"Debug mode:\", config.debug)\n```\n\n### Environment-Based Configuration\n\n```lua\n-- Different settings for different environments\nlocal function createWebhook(environment)\n    local configs = {\n        development = {\n            username = \"🔧 Dev Bot\",\n            debug = true,\n            queue_enabled = false, -- Immediate sending for testing\n            filter_profanity = false\n        },\n        production = {\n            username = \"🎮 Game Bot\",\n            debug = false,\n            queue_rate_limit = 2,\n            filter_profanity = true,\n            max_retries = 5\n        }\n    }\n    \n    local config = configs[environment] or configs.production\n    return WebhookLib.new(\"https://discord.com/api/webhooks/YOUR_ID/YOUR_TOKEN\", config)\nend\n\n-- Usage\nlocal webhook = createWebhook(\"production\")\n```"
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "Best Practices",
      "content": "Guidelines and recommendations for using WebhookLib effectively in production environments.",
      "subsections": [
        {
          "title": "Production Deployment",
          "content": "**Essential Production Practices:**\n\n1. **Always Use pcall() for Webhook Calls**\n```lua\n-- GOOD: Safe webhook calls\ngame.Players.PlayerAdded:Connect(function(player)\n    pcall(function()\n        webhook:SendJoinMessage(player)\n    end)\nend)\n\n-- BAD: Unprotected calls can crash your server\ngame.Players.PlayerAdded:Connect(function(player)\n    webhook:SendJoinMessage(player) -- Could throw error\nend)\n```\n\n2. **Disable Debug Mode in Production**\n```lua\n-- Production configuration\nlocal webhook = WebhookLib.new(url, {\n    debug = false, -- Important for performance\n    username = \"🎮 Production Game\",\n    filter_profanity = true\n})\n```\n\n3. **Implement Graceful Shutdown**\n```lua\ngame:BindToClose(function()\n    if webhook then\n        webhook:SendMessage(\"🛑 Server shutting down...\")\n        webhook:Shutdown()\n        wait(2) -- Give time to complete\n    end\nend)\n```\n\n4. **Use Environment Variables for URLs**\n- Never hardcode webhook URLs in your scripts\n- Store URLs in secure configuration systems\n- Use different webhooks for different environments"
        },
        {
          "title": "Performance Optimization",
          "content": "**Queue System Guidelines:**\n\n- **Only enable queueing for high-traffic games**\n- Most games don't need rate limiting\n- Enable queue only if you're hitting Discord rate limits\n\n```lua\n-- Low traffic game (most games)\nlocal webhook = WebhookLib.new(url) -- No queue needed\n\n-- High traffic game (100+ players, frequent events)\nlocal webhook = WebhookLib.new(url, {\n    queue_rate_limit = 5 -- 5 requests per second\n})\n```\n\n**Caching Optimization:**\n\n```lua\n-- Adjust cache TTL based on your needs\nlocal webhook = WebhookLib.new(url, {\n    cache_ttl_avatar = 1800, -- 30 minutes for high-traffic games\n    -- cache_ttl_avatar = 300, -- 5 minutes for low-traffic games\n})\n```\n\n**Batch Operations:**\n\n```lua\n-- Instead of multiple individual messages\n-- Combine information into fewer, richer messages\nlocal function sendHourlyReport()\n    local stats = collectHourlyStats()\n    \n    webhook:SendEmbed({\n        title = \"📊 Hourly Report\",\n        fields = {\n            {name = \"New Players\", value = tostring(stats.newPlayers)},\n            {name = \"Revenue\", value = \"$\" .. stats.revenue},\n            {name = \"Playtime\", value = stats.totalPlaytime .. \" hours\"}\n        }\n    })\nend\n```"
        },
        {
          "title": "Security Considerations",
          "content": "**Webhook URL Security:**\n\n- **Never** commit webhook URLs to version control\n- Use secure configuration management\n- Rotate webhook URLs periodically\n- Monitor webhook usage for unauthorized access\n\n**Content Filtering:**\n\n```lua\n-- Always enable profanity filtering for user-generated content\nlocal webhook = WebhookLib.new(url, {\n    filter_profanity = true,\n    banned_words = {\n        \"spam\", \"advertisement\", \"discord.gg\", \"robux\"\n    }\n})\n```\n\n**Input Validation:**\n\n```lua\n-- Validate user input before sending\nlocal function sendPlayerMessage(player, message)\n    -- Validate input\n    if not player or not message or message:len() > 100 then\n        return false\n    end\n    \n    -- Additional validation\n    if message:match(\"http\") or message:match(\"discord.gg\") then\n        return false\n    end\n    \n    -- Safe to send\n    pcall(function()\n        webhook:SendCustomEvent(\"Player Message\", {\n            Player = player.DisplayName,\n            Message = message\n        })\n    end)\nend\n```"
        },
        {
          "title": "Error Handling Strategies",
          "content": "**Comprehensive Error Handling:**\n\n```lua\n-- Create error-resistant webhook setup\nlocal function createRobustWebhook(url)\n    local success, webhook = pcall(function()\n        return WebhookLib.new(url, {\n            max_retries = 5,\n            retry_backoff_base = 2,\n            debug = game.PlaceId == 0 -- Debug only in Studio\n        })\n    end)\n    \n    if not success then\n        warn(\"WebhookLib initialization failed:\", webhook)\n        return nil\n    end\n    \n    return webhook\nend\n\n-- Usage with fallback\nlocal webhook = createRobustWebhook(PRIMARY_WEBHOOK_URL)\nif not webhook then\n    webhook = createRobustWebhook(BACKUP_WEBHOOK_URL)\nend\n```\n\n**Fallback Systems:**\n\n```lua\n-- Multiple webhook fallback\nlocal webhooks = {\n    createRobustWebhook(PRIMARY_URL),\n    createRobustWebhook(SECONDARY_URL)\n}\n\n-- Remove failed webhooks\nfor i = #webhooks, 1, -1 do\n    if not webhooks[i] then\n        table.remove(webhooks, i)\n    end\nend\n\n-- Send to available webhooks\nlocal function sendToWebhooks(message)\n    for _, webhook in ipairs(webhooks) do\n        pcall(function()\n            webhook:SendMessage(message)\n        end)\n    end\nend\n```\n\n**Logging and Monitoring:**\n\n```lua\n-- Track webhook health\nlocal webhookStats = {\n    messagesSent = 0,\n    errors = 0,\n    lastError = nil\n}\n\nlocal function safeWebhookCall(func)\n    local success, error = pcall(func)\n    \n    if success then\n        webhookStats.messagesSent = webhookStats.messagesSent + 1\n    else\n        webhookStats.errors = webhookStats.errors + 1\n        webhookStats.lastError = {error, os.time()}\n        warn(\"Webhook error:\", error)\n    end\nend\n\n-- Usage\nsafeWebhookCall(function()\n    webhook:SendMessage(\"Test message\")\nend)\n```"
        },
        {
          "title": "Content Guidelines",
          "content": "**Message Design Best Practices:**\n\n1. **Use Meaningful Titles and Descriptions**\n```lua\n-- GOOD: Clear, informative\nwebhook:SendEmbed({\n    title = \"🎯 Daily Challenge Complete\",\n    description = \"Player completed today's daily challenge\"\n})\n\n-- BAD: Vague, unclear\nwebhook:SendEmbed({\n    title = \"Event\",\n    description = \"Something happened\"\n})\n```\n\n2. **Use Consistent Color Coding**\n```lua\nlocal COLORS = {\n    SUCCESS = 0x00ff00, -- Green for positive events\n    WARNING = 0xffaa00, -- Orange for warnings\n    ERROR = 0xff0000,   -- Red for errors\n    INFO = 0x0099ff     -- Blue for information\n}\n\nwebhook:SendEmbed({\n    title = \"⚠️ High Memory Usage\",\n    color = COLORS.WARNING\n})\n```\n\n3. **Limit Message Frequency**\n```lua\n-- Rate limit notifications to prevent spam\nlocal lastNotification = 0\nlocal NOTIFICATION_COOLDOWN = 300 -- 5 minutes\n\nlocal function sendCriticalAlert(message)\n    local now = os.time()\n    if now - lastNotification > NOTIFICATION_COOLDOWN then\n        webhook:SendMessage(\"🚨 \" .. message)\n        lastNotification = now\n    end\nend\n```\n\n4. **Use Rich Formatting**\n```lua\n-- Leverage Discord's markdown formatting\nwebhook:SendEmbed({\n    title = \"📊 Server Statistics\",\n    description = \"Current server performance metrics\",\n    fields = {\n        {\n            name = \"**Performance**\", \n            value = \"```\\nCPU: 15%\\nMemory: 450MB\\nPlayers: 25/50\\n```\",\n            inline = false\n        }\n    }\n})\n```"
        },
        {
          "title": "Testing and Debugging",
          "content": "**Development Testing:**\n\n```lua\n-- Use different webhooks for testing\nlocal WEBHOOK_URLS = {\n    development = \"https://discord.com/api/webhooks/.../dev-webhook\",\n    staging = \"https://discord.com/api/webhooks/.../staging-webhook\",\n    production = \"https://discord.com/api/webhooks/.../prod-webhook\"\n}\n\nlocal environment = game.PlaceId == 0 and \"development\" or \"production\"\nlocal webhook = WebhookLib.new(WEBHOOK_URLS[environment], {\n    debug = environment == \"development\"\n})\n```\n\n**Debug Information:**\n\n```lua\n-- Enable debug mode during development\nlocal webhook = WebhookLib.new(url, {\n    debug = true -- Shows detailed logs\n})\n\n-- Monitor webhook health\nlocal function printWebhookStatus()\n    print(\"Queue enabled:\", webhook:IsQueueEnabled())\n    print(\"Queue size:\", webhook:GetQueueSize())\n    \n    local config = webhook:GetConfiguration()\n    print(\"Current config:\", game.HttpService:JSONEncode(config))\nend\n```\n\n**Testing Message Formats:**\n\n```lua\n-- Test different message types in development\nif game.PlaceId == 0 then -- Studio only\n    -- Test basic message\n    webhook:SendMessage(\"🔧 Development test message\")\n    \n    -- Test embed\n    webhook:SendEmbed({\n        title = \"🧪 Test Embed\",\n        description = \"Testing embed functionality\",\n        color = 0xff6600,\n        fields = {{name = \"Test Field\", value = \"Test Value\"}}\n    })\n    \n    -- Test player notification (use your own user ID)\n    local testPlayer = game.Players:GetPlayerByUserId(123456789)\n    if testPlayer then\n        webhook:SendJoinMessage(testPlayer)\n    end\nend\n```"
        }
      ]
    },
    {
      "id": "troubleshooting",
      "title": "Troubleshooting",
      "content": "Common issues and their solutions when using WebhookLib.",
      "subsections": [
        {
          "title": "Common Setup Issues",
          "content": "**\"HTTP requests are disabled in game settings\"**\n\n*Solution:*\n1. Go to Roblox Studio > Game Settings > Security\n2. Check \"Allow HTTP Requests\"\n3. Save and republish your game\n4. Restart the server\n\n**\"WebhookLib.new() requires a valid webhook URL string\"**\n\n*Causes and Solutions:*\n- Empty or nil URL parameter\n- Incorrect webhook URL format\n- Using Roblox proxy incorrectly\n\n```lua\n-- CORRECT: Using webhook proxy\nlocal url = \"https://webhook.lewisakura.moe/api/webhooks/ID/TOKEN\"\n\n-- INCORRECT: Direct Discord URL (blocked by Roblox)\nlocal url = \"https://discord.com/api/webhooks/ID/TOKEN\"\n```\n\n**\"ModuleScript not found\"**\n\n*Solution:*\n1. Ensure WebhookLib is in ReplicatedStorage\n2. Name it exactly \"WebhookLib\"\n3. Require it correctly:\n\n```lua\nlocal WebhookLib = require(game.ReplicatedStorage.WebhookLib)\n```"
        },
        {
          "title": "Message Sending Issues",
          "content": "**Messages not appearing in Discord**\n\n*Troubleshooting steps:*\n1. Enable debug mode to see detailed logs:\n\n```lua\nlocal webhook = WebhookLib.new(url, {debug = true})\n```\n\n2. Check for HTTP errors in output:\n   - HTTP 429: Rate limited (enable queue system)\n   - HTTP 404: Invalid webhook URL\n   - HTTP 403: Webhook deleted or permissions changed\n\n3. Verify webhook URL is working:\n\n```lua\n-- Test with minimal message\nwebhook:SendMessage(\"Test message\")\n```\n\n**Rate Limiting Issues**\n\n*Symptoms:*\n- \"HTTP 429\" errors in debug logs\n- Messages delayed or not sent\n- \"Discord rate limit detected\" messages\n\n*Solutions:*\n\n```lua\n-- Enable queue with rate limiting\nlocal webhook = WebhookLib.new(url, {\n    queue_rate_limit = 2, -- 2 requests per second\n    debug = true\n})\n\n-- Or enable queue without rate limiting\nlocal webhook = WebhookLib.new(url, {\n    queue_enabled = true\n})\n```\n\n**Embed Formatting Issues**\n\n*Common problems:*\n- Text truncation (automatic, this is normal)\n- Fields not appearing (check field structure)\n- Colors not showing (use hex format: 0xFFFFFF)\n\n```lua\n-- Correct embed structure\nwebhook:SendEmbed({\n    title = \"Title Here\", -- String\n    color = 0x0099ff,    -- Number in hex format\n    fields = {           -- Array of objects\n        {\n            name = \"Field Name\",   -- String (required)\n            value = \"Field Value\", -- String (required)\n            inline = true          -- Boolean (optional)\n        }\n    }\n})\n```"
        },
        {
          "title": "Performance Issues",
          "content": "**Game Lag or Freezing**\n\n*Causes:*\n- Blocking HTTP requests (WebhookLib is non-blocking by design)\n- Too many simultaneous webhook calls\n- Debug mode enabled in production\n\n*Solutions:*\n\n```lua\n-- GOOD: Non-blocking, safe calls\npcall(function()\n    webhook:SendMessage(\"Message\")\nend)\n\n-- GOOD: Disable debug in production\nlocal webhook = WebhookLib.new(url, {\n    debug = false -- Important for performance\n})\n\n-- GOOD: Use queue for high-traffic games\nlocal webhook = WebhookLib.new(url, {\n    queue_rate_limit = 3 -- Limit requests\n})\n```\n\n**Memory Usage Issues**\n\n*Causes:*\n- Large avatar cache\n- Long-running queues\n- Not calling Shutdown() properly\n\n*Solutions:*\n\n```lua\n-- Reduce avatar cache time\nlocal webhook = WebhookLib.new(url, {\n    cache_ttl_avatar = 300 -- 5 minutes instead of default\n})\n\n-- Proper shutdown\ngame:BindToClose(function()\n    webhook:Shutdown()\n    wait(2)\nend)\n```\n\n**Queue Building Up**\n\n*Check queue size:*\n\n```lua\nprint(\"Queue size:\", webhook:GetQueueSize())\n```\n\n*Solutions:*\n- Increase rate limit if too restrictive\n- Check for network connectivity issues\n- Verify webhook URL is still valid"
        },
        {
          "title": "DataStore Issues",
          "content": "**Join Count Not Saving**\n\n*Symptoms:*\n- Join counts always show 0 or 1\n- \"DataStore not available\" in debug logs\n\n*Solutions:*\n\n1. **Check DataStore Access:**\n   - Ensure game is published (DataStores don't work in unpublished places)\n   - Verify DataStore API is enabled in game settings\n\n2. **Check for DataStore Errors:**\n\n```lua\nlocal webhook = WebhookLib.new(url, {debug = true})\n-- Look for DataStore error messages in output\n```\n\n3. **Custom DataStore Name:**\n\n```lua\nlocal webhook = WebhookLib.new(url, {\n    datastore_name = \"MyGame_PlayerData\" -- Use unique name\n})\n```\n\n**DataStore Request Limits**\n\n*Symptoms:*\n- \"Request was throttled\" errors\n- Join counts not updating consistently\n\n*Solutions:*\n- WebhookLib automatically handles DataStore throttling\n- Reduce frequency of join count queries if needed\n- The system uses in-memory caching to minimize DataStore calls"
        },
        {
          "title": "Debug and Monitoring",
          "content": "**Enable Comprehensive Debugging**\n\n```lua\n-- Enable all debugging features\nlocal webhook = WebhookLib.new(url, {\n    debug = true, -- Detailed logs\n    max_retries = 1 -- Fail faster for testing\n})\n\n-- Monitor webhook health\nlocal function checkWebhookHealth()\n    print(\"=== Webhook Health Check ===\")\n    print(\"Queue enabled:\", webhook:IsQueueEnabled())\n    print(\"Queue size:\", webhook:GetQueueSize())\n    \n    local config = webhook:GetConfiguration()\n    print(\"Username:\", config.username)\n    print(\"Debug mode:\", config.debug)\n    print(\"Max retries:\", config.max_retries)\n    print(\"Rate limit:\", config.queue_rate_limit or \"None\")\nend\n\n-- Run health check every minute\ngame:GetService(\"RunService\").Heartbeat:Connect(function()\n    if workspace.DistributedGameTime % 60 < 1 then\n        checkWebhookHealth()\n    end\nend)\n```\n\n**Test Individual Features**\n\n```lua\n-- Test basic message\nlocal success = webhook:SendMessage(\"Test basic message\")\nprint(\"Basic message queued:\", success)\n\n-- Test embed\nlocal success = webhook:SendEmbed({\n    title = \"Test Embed\",\n    description = \"Testing embed functionality\",\n    color = 0x00ff00\n})\nprint(\"Embed queued:\", success)\n\n-- Test configuration changes\nprint(\"Original username:\", webhook:GetConfiguration().username)\nwebhook:SetDefaultUsername(\"Test Bot\")\nprint(\"New username:\", webhook:GetConfiguration().username)\n```\n\n**Network Connectivity Testing**\n\n```lua\n-- Test basic HTTP connectivity\nlocal HttpService = game:GetService(\"HttpService\")\n\nlocal function testHttpConnectivity()\n    local success, result = pcall(function()\n        return HttpService:GetAsync(\"https://httpbin.org/get\")\n    end)\n    \n    print(\"HTTP connectivity:\", success and \"OK\" or \"FAILED\")\n    if not success then\n        print(\"Error:\", result)\n    end\nend\n\ntestHttpConnectivity()\n```"
        }
      ]
    }
  ]
}